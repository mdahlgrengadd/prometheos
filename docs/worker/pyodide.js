// Built worker plugin: pyodide
// Generated on: 2025-06-01T14:09:45.884Z

function $(e){let t=e.trim().toLowerCase();return t.startsWith("<!doctype html")||t.startsWith("<html")||t.includes("<title>")||t.includes("<head>")||t.includes("<body>")}var y=null;function A(e){y=e,console.log(`Python loader base URL set to: ${e}`),console.log(`globalBaseUrl is now: ${y}`)}function T(){return console.log(`getBaseUrl called, globalBaseUrl is: ${y}`),y!==null?(console.log(`Using globalBaseUrl: ${y}`),y):(console.log("Using fallback base URL: /"),"/")}async function H(e){try{let r=[`${T()}worker/pyodide/python/${e}`],s=null;for(let o of r)try{console.log(`Trying to load Python file from: ${o}`);let n=await fetch(o);if(n.ok){let i=await n.text();if($(i)){console.warn(`Got HTML content instead of Python from ${o}, trying next path...`),s=new Error(`Got HTML content instead of Python from ${o}`);continue}return console.log(`Successfully loaded Python file from: ${o}`),i}s=new Error(`Failed to load ${e} from ${o}: ${n.statusText}`)}catch(n){s=n instanceof Error?n:new Error(String(n))}return console.log(`All direct paths failed for ${e}, trying bundle fallback...`),await j(e)}catch(t){throw console.error(`Error loading Python file ${e}:`,t),t}}async function j(e){try{let r=[`${T()}worker/pyodide-python-bundle.json`,"/public/worker/pyodide-python-bundle.json","./worker/pyodide-python-bundle.json"];for(let s of r)try{console.log(`Trying to load bundle from: ${s}`);let o=await fetch(s);if(o.ok){let n=await o.text();if($(n)){console.warn(`Got HTML content instead of JSON from ${s}`);continue}let i=JSON.parse(n);if(i[e])return console.log(`Successfully loaded ${e} from bundle at ${s}`),i[e];throw new Error(`File ${e} not found in bundle`)}}catch(o){console.warn(`Failed to load bundle from ${s}:`,o)}throw new Error(`Failed to load ${e} from bundle - all bundle paths failed`)}catch(t){throw console.error(`Bundle fallback failed for ${e}:`,t),t}}async function I(){let e=["desktop_api.py","desktop_api_legacy.py","events.py","mcp_protocol.py","comlink_helpers.py","bridge_init.py"];try{return(await Promise.all(e.map(r=>H(r)))).join(`

`)}catch(t){throw console.error("Error loading Python bridge files:",t),t}}async function z(){return H("comlink_helpers.py")}var P=class{pyodide;constructor(t){this.pyodide=t}async setupDesktopApiBridge(t){console.log("Setting up Hybrid Desktop API bridge...");try{this.pyodide.globals.set("_pyodide_plugin_instance",t),globalThis._pyodide_plugin_instance=t;let r=await I();await this.pyodide.runPython(r),console.log("Hybrid Desktop API bridge setup completed successfully")}catch(r){throw console.error("Failed to setup Hybrid Desktop API bridge:",r),r}}async enhanceComlinkIntegration(){console.log("Enhancing Python-Comlink integration...");try{let t=await z();await this.pyodide.runPython(t),console.log("Python-Comlink integration enhanced successfully")}catch(t){throw console.error("Failed to enhance Python-Comlink integration:",t),t}}};var U=Symbol("Comlink.proxy"),G=Symbol("Comlink.endpoint"),V=Symbol("Comlink.releaseProxy"),x=Symbol("Comlink.finalizer"),w=Symbol("Comlink.thrown"),B=e=>typeof e=="object"&&e!==null||typeof e=="function",J={canHandle:e=>B(e)&&e[U],serialize(e){let{port1:t,port2:r}=new MessageChannel;return N(e,t),[r,[r]]},deserialize(e){return e.start(),S(e)}},Y={canHandle:e=>B(e)&&w in e,serialize({value:e}){let t;return e instanceof Error?t={isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:t={isError:!1,value:e},[t,[]]},deserialize(e){throw e.isError?Object.assign(new Error(e.value.message),e.value):e.value}},D=new Map([["proxy",J],["throw",Y]]);function X(e,t){for(let r of e)if(t===r||r==="*"||r instanceof RegExp&&r.test(t))return!0;return!1}function N(e,t=globalThis,r=["*"]){t.addEventListener("message",function s(o){if(!o||!o.data)return;if(!X(r,o.origin)){console.warn(`Invalid origin '${o.origin}' for comlink proxy`);return}let{id:n,type:i,path:d}=Object.assign({path:[]},o.data),u=(o.data.argumentList||[]).map(p),a;try{let l=d.slice(0,-1).reduce((c,f)=>c[f],e),g=d.reduce((c,f)=>c[f],e);switch(i){case"GET":a=g;break;case"SET":l[d.slice(-1)[0]]=p(o.data.value),a=!0;break;case"APPLY":a=g.apply(l,u);break;case"CONSTRUCT":{let c=new g(...u);a=re(c)}break;case"ENDPOINT":{let{port1:c,port2:f}=new MessageChannel;N(e,f),a=te(c,[c])}break;case"RELEASE":a=void 0;break;default:return}}catch(l){a={value:l,[w]:0}}Promise.resolve(a).catch(l=>({value:l,[w]:0})).then(l=>{let[g,c]=_(l);t.postMessage(Object.assign(Object.assign({},g),{id:n}),c),i==="RELEASE"&&(t.removeEventListener("message",s),O(t),x in e&&typeof e[x]=="function"&&e[x]())}).catch(l=>{let[g,c]=_({value:new TypeError("Unserializable return value"),[w]:0});t.postMessage(Object.assign(Object.assign({},g),{id:n}),c)})}),t.start&&t.start()}function K(e){return e.constructor.name==="MessagePort"}function O(e){K(e)&&e.close()}function S(e,t){let r=new Map;return e.addEventListener("message",function(o){let{data:n}=o;if(!n||!n.id)return;let i=r.get(n.id);if(i)try{i(n)}finally{r.delete(n.id)}}),v(e,r,[],t)}function m(e){if(e)throw new Error("Proxy has been released and is not useable")}function F(e){return h(e,new Map,{type:"RELEASE"}).then(()=>{O(e)})}var k=new WeakMap,b="FinalizationRegistry"in globalThis&&new FinalizationRegistry(e=>{let t=(k.get(e)||0)-1;k.set(e,t),t===0&&F(e)});function Q(e,t){let r=(k.get(t)||0)+1;k.set(t,r),b&&b.register(e,t,e)}function Z(e){b&&b.unregister(e)}function v(e,t,r=[],s=function(){}){let o=!1,n=new Proxy(s,{get(i,d){if(m(o),d===V)return()=>{Z(n),F(e),t.clear(),o=!0};if(d==="then"){if(r.length===0)return{then:()=>n};let u=h(e,t,{type:"GET",path:r.map(a=>a.toString())}).then(p);return u.then.bind(u)}return v(e,t,[...r,d])},set(i,d,u){m(o);let[a,l]=_(u);return h(e,t,{type:"SET",path:[...r,d].map(g=>g.toString()),value:a},l).then(p)},apply(i,d,u){m(o);let a=r[r.length-1];if(a===G)return h(e,t,{type:"ENDPOINT"}).then(p);if(a==="bind")return v(e,t,r.slice(0,-1));let[l,g]=L(u);return h(e,t,{type:"APPLY",path:r.map(c=>c.toString()),argumentList:l},g).then(p)},construct(i,d){m(o);let[u,a]=L(d);return h(e,t,{type:"CONSTRUCT",path:r.map(l=>l.toString()),argumentList:u},a).then(p)}});return Q(n,e),n}function ee(e){return Array.prototype.concat.apply([],e)}function L(e){let t=e.map(_);return[t.map(r=>r[0]),ee(t.map(r=>r[1]))]}var W=new WeakMap;function te(e,t){return W.set(e,t),e}function re(e){return Object.assign(e,{[U]:!0})}function _(e){for(let[t,r]of D)if(r.canHandle(e)){let[s,o]=r.serialize(e);return[{type:"HANDLER",name:t,value:s},o]}return[{type:"RAW",value:e},W.get(e)||[]]}function p(e){switch(e.type){case"HANDLER":return D.get(e.name).deserialize(e.value);case"RAW":return e.value}}function h(e,t,r,s){return new Promise(o=>{let n=oe();t.set(n,o),e.start&&e.start(),e.postMessage(Object.assign({id:n},r),s)})}function oe(){return new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}var E=class{handleComlinkPort(t){try{console.log("Received Comlink port from main thread"),console.log("Wrapping Comlink port for desktop_api_comlink and desktop_mcp_comlink");let r=S(t);globalThis.desktop_api_comlink=r.api,globalThis.desktop_mcp_comlink=r.mcp,console.log("desktop_api_comlink and desktop_mcp_comlink proxies set on globalThis"),t.start(),console.log("Comlink bridge proxies exposed to Python context")}catch(r){console.error("Error handling Comlink port:",r)}}};var C=class{_pyodide=null;_isLoading=!1;_progress=null;async initPyodide(){if(this._pyodide)return{status:"success",message:"Pyodide already initialized"};if(this._isLoading)return{status:"loading",message:"Pyodide initialization in progress"};try{this._isLoading=!0,this._progress={phase:"initializing",message:"Starting Pyodide initialization..."},console.log("Loading Pyodide from CDN..."),this._progress={phase:"downloading",message:"Downloading Pyodide runtime..."},console.log("Loading Pyodide via fetch...");let t=await fetch("https://cdn.jsdelivr.net/pyodide/v0.24.1/full/pyodide.js");if(!t.ok)throw new Error(`Failed to load Pyodide: ${t.statusText}`);let r=await t.text();new Function(r).call(globalThis);let n=globalThis.loadPyodide;if(!n)throw new Error("loadPyodide not available after loading script");let i=await n({indexURL:"https://cdn.jsdelivr.net/pyodide/v0.24.1/full/"});return this._pyodide=i,this._progress={phase:"extracting",message:"Installing base packages..."},await this._pyodide.loadPackage(["micropip"]),this._progress={phase:"ready",message:"Pyodide ready for Python execution"},this._isLoading=!1,console.log("Pyodide initialized successfully"),{status:"success",message:"Pyodide initialized"}}catch(t){return this._isLoading=!1,this._progress=null,console.error("Failed to initialize Pyodide:",t),{status:"error",message:`Failed to initialize Pyodide: ${t instanceof Error?t.message:String(t)}`}}}async executePython(t,r=!1){if(!this._pyodide)return{success:!1,error:"Pyodide not initialized. Call initPyodide() first."};try{let s="";r&&await this._pyodide.runPython(`
import sys
from io import StringIO
_stdout_capture = StringIO()
sys.stdout = _stdout_capture
`);let o;if(typeof this._pyodide.runPythonAsync=="function")o=await this._pyodide.runPythonAsync(t);else if(typeof this._pyodide.runPython=="function")o=this._pyodide.runPython(t);else throw new Error("Neither runPython nor runPythonAsync is available");if(r){let n=await this._pyodide.runPython(`
_stdout_capture.getvalue()
`);s=String(n),await this._pyodide.runPython(`
sys.stdout = sys.__stdout__
`)}return{success:!0,result:o,stdout:r?s:void 0}}catch(s){return{success:!1,error:s instanceof Error?s.message:String(s)}}}async installPackage(t){if(!this._pyodide)return{success:!1,error:"Pyodide not initialized"};try{return await this._pyodide.runPython(`
import micropip
await micropip.install('${t}')
`),{success:!0,result:`Package ${t} installed successfully`}}catch(r){return{success:!1,error:`Failed to install ${t}: ${r instanceof Error?r.message:String(r)}`}}}getProgress(){return this._progress}isReady(){return this._pyodide!==null&&!this._isLoading}getPyodide(){return this._pyodide}cleanup(){this._pyodide&&(this._pyodide=null,this._progress=null,console.log("Pyodide core cleaned up"))}};var M=class{async handleDesktopApiRequest(t,r,s){try{switch(t){case"list_components":return console.log("Python requested component list"),{success:!0,result:{type:"desktop-api-response",requestId:r,method:t,result:[]}};case"execute_action":{let{componentId:o,action:n,params:i}=s||{};return console.log(`Python requested action: ${o}.${n}`,i),{success:!0,result:{type:"desktop-api-response",requestId:r,method:t,result:{success:!0,message:`Action ${n} on ${o} executed`}}}}case"subscribe_event":{let{eventName:o}=s||{};return console.log(`Python ${t}: ${o}`),{success:!0,result:{type:"desktop-api-response",requestId:r,method:t,result:{success:!0,message:`Subscribed to ${o}`}}}}case"emit_event":{let{eventName:o,data:n}=s||{};return console.log(`Python emitting event: ${o}`,n),{success:!0,result:{type:"desktop-api-response",requestId:r,method:t,result:{success:!0,message:`Event ${o} emitted`}}}}default:return{success:!1,error:`Unknown desktop API method: ${t}`}}}catch(o){return{success:!1,error:o instanceof Error?o.message:String(o)}}}};var R=class{forwardToMCPServer;constructor(t){this.forwardToMCPServer=t}async handleMCPProtocolMessage(t){try{let r;return typeof t=="string"?(console.log("Parsing JSON message:",t),r=JSON.parse(t)):r=t,console.log("Handling MCP protocol message:",JSON.stringify(r)),console.log("Message type:",typeof r),console.log("Message keys:",Object.keys(r||{})),{success:!0,result:await this.forwardToMCPServer(r)}}catch(r){return console.error("Error handling MCP message:",r),{success:!1,error:r instanceof Error?r.message:String(r)}}}};var se={id:"pyodide",_core:new C,_bridge:null,_mcpHandler:null,_comlinkHandler:new E,_desktopAPIHandler:new M,async initPyodide(e){e?.baseUrl&&A(e.baseUrl);let t=await this._core.initPyodide();if(t.status==="success"){let r=this._core.getPyodide();if(r){this._bridge=new P(r),this._mcpHandler=new R(this._forwardToMCPServer.bind(this)),await this._setupDesktopApiBridge();try{await this._enhanceComlinkIntegration()}catch(s){console.warn("Failed to enhance Comlink integration, but continuing:",s)}}}return t},async _setupDesktopApiBridge(){if(!this._bridge)throw new Error("Bridge not initialized");await this._bridge.setupDesktopApiBridge(this)},async executePython(e,t=!1){return this._core.executePython(e,t)},async installPackage(e){return this._core.installPackage(e)},getProgress(){return this._core.getProgress()},isReady(){return this._core.isReady()},cleanup(){this._core.cleanup(),this._bridge=null,this._mcpHandler=null},async handleMCPProtocolMessage(e){return this._mcpHandler?this._mcpHandler.handleMCPProtocolMessage(e):{success:!1,error:"MCP handler not initialized"}},async _forwardToMCPServer(e){let r=self.workerPluginManager;if(!r)throw new Error("Worker plugin manager not available");try{await r.callPlugin("mcp-server","isInitialized")||(console.log("MCP server not initialized, initializing..."),await r.callPlugin("mcp-server","initialize"))}catch(s){console.warn("Error checking MCP server, will try to call anyway:",s)}return r.callPlugin("mcp-server","processMCPMessage",{message:e})},handleComlinkPort(e){this._comlinkHandler.handleComlinkPort(e)},handle(e,t){switch(e){case"initPyodide":return this.initPyodide(t);case"executePython":return typeof t?.code!="string"?{success:!1,error:"executePython requires 'code' parameter"}:this.executePython(t.code,!!t.returnStdout);case"installPackage":return typeof t?.packageName!="string"?{success:!1,error:"installPackage requires 'packageName' parameter"}:this.installPackage(t.packageName);case"getProgress":return this.getProgress();case"isReady":return this.isReady();case"cleanup":return this.cleanup();case"handleDesktopApiRequest":return typeof t?.method!="string"||typeof t?.requestId!="string"?{success:!1,error:"handleDesktopApiRequest requires 'method' and 'requestId' parameters"}:this.handleDesktopApiRequest(t.method,t.requestId,t.params);case"handleMCPProtocolMessage":return t?.message===void 0?{success:!1,error:"handleMCPProtocolMessage requires 'message' parameter"}:this.handleMCPProtocolMessage(t.message);case"handleComlinkPort":return!t?.port||!(t.port instanceof MessagePort)?{success:!1,error:"handleComlinkPort requires a valid MessagePort parameter"}:this.handleComlinkPort(t.port);default:return{success:!1,error:`Unknown method: ${e}`}}},async handleDesktopApiRequest(e,t,r){return this._desktopAPIHandler.handleDesktopApiRequest(e,t,r)},async _enhanceComlinkIntegration(){if(!this._bridge)throw new Error("Bridge not initialized");await this._bridge.enhanceComlinkIntegration()}},q=se;var be=q;export{be as default};
/*! Bundled license information:

comlink/dist/esm/comlink.mjs:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
