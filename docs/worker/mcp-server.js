// Built worker plugin: mcp-server
// Generated on: 2025-05-27T12:07:31.457Z

var u={id:"mcp-server",_tools:new Map,_isInitialized:!1,_registeredComponents:new Set,async initialize(){try{return this._isInitialized=!0,console.log("MCP Server initialized"),{status:"success",message:"MCP Server initialized"}}catch(e){return{status:"error",message:`Failed to initialize MCP Server: ${e instanceof Error?e.message:String(e)}`}}},async processMCPMessage(e){try{if(!e.jsonrpc||e.jsonrpc!=="2.0"||!e.method)return{jsonrpc:"2.0",error:{code:-32600,message:"Invalid Request"},id:e.id||null};switch(e.method){case"tools/list":return this._handleToolsList(e);case"tools/call":return this._handleToolsCall(e);default:return{jsonrpc:"2.0",error:{code:-32601,message:`Method ${e.method} not found`},id:e.id||null}}}catch(t){return{jsonrpc:"2.0",error:{code:-32603,message:`Internal error: ${t instanceof Error?t.message:String(t)}`},id:e.id||null}}},async _handleToolsList(e){return{jsonrpc:"2.0",result:await this.getAvailableTools(),id:e.id||null}},async _handleToolsCall(e){let t=e.params;if(!t||typeof t!="object")return{jsonrpc:"2.0",error:{code:-32602,message:"Invalid params"},id:e.id||null};let{name:s,arguments:n}=t;if(!s||typeof s!="string")return{jsonrpc:"2.0",error:{code:-32602,message:"Missing tool name"},id:e.id||null};try{return{jsonrpc:"2.0",result:await this.executeTool({name:s,arguments:n||{}}),id:e.id||null}}catch(r){return{jsonrpc:"2.0",error:{code:-32603,message:`Error executing tool: ${r instanceof Error?r.message:String(r)}`},id:e.id||null}}},async registerTool(e,t,s,n){try{let r=`${e}.${t}`;if(this._tools.has(r))return{status:"error",message:`Tool ${r} is already registered`};let o={type:"object",properties:n||{},required:n?Object.keys(n).filter(i=>n[i].required):[]},l={componentId:e,action:t,tool:{name:r,description:s,inputSchema:o}};return this._tools.set(r,l),this._registeredComponents.add(e),console.log(`Registered MCP tool: ${r}`),{status:"success",message:`Tool ${r} registered`}}catch(r){return{status:"error",message:`Failed to register tool: ${r instanceof Error?r.message:String(r)}`}}},async unregisterTool(e){if(!this._tools.has(e))return{status:"error",message:`Tool ${e} not found`};this._tools.delete(e);let t=e.split(".")[0],s=!1;for(let n of this._tools.keys())if(n.startsWith(t+".")){s=!0;break}return s||this._registeredComponents.delete(t),console.log(`Unregistered MCP tool: ${e}`),{status:"success",message:`Tool ${e} unregistered`}},async getAvailableTools(){return Array.from(this._tools.values()).map(e=>e.tool)},async executeTool(e){let t=this._tools.get(e.name);if(!t)return{content:[{type:"text",text:`Tool ${e.name} not found`}],isError:!0};try{let s=await this._executeToolInMainThread(t.componentId,t.action,e.arguments);return{content:[{type:"text",text:JSON.stringify(s,null,2)}],isError:!1}}catch(s){return{content:[{type:"text",text:`Error executing ${e.name}: ${s instanceof Error?s.message:String(s)}`}],isError:!0}}},async _executeToolInMainThread(e,t,s){return new Promise((n,r)=>{let o=`mcp-tool-${Date.now()}-${Math.random().toString(36).substring(2,9)}`,a=null,l=i=>{i.data.type==="mcp-tool-response"&&i.data.requestId===o&&(console.log(`MCP tool response received for ${o}: ${e}.${t}`),self.removeEventListener("message",l),a!==null&&clearTimeout(a),i.data.error?r(new Error(i.data.error)):n(i.data.result))};self.addEventListener("message",l),console.log(`MCP tool request sent: ${o} for ${e}.${t}`),self.postMessage({type:"mcp-tool-request",requestId:o,componentId:e,action:t,params:s}),a=setTimeout(()=>{console.log(`MCP tool timeout: ${o} for ${e}.${t}`),self.removeEventListener("message",l),r(new Error("Tool execution timeout"))},3e4)})},async autoRegisterFromApiComponents(e){let t=0,s=[];for(let n of e){if(this._registeredComponents.has(n.id)){console.log(`MCP: Skipping already registered component: ${n.id}`);continue}this._registeredComponents.add(n.id);for(let r of n.actions)try{let o=await this.registerTool(n.id,r.name,r.description,r.parameters);o.status==="success"?t++:s.push(`${n.id}.${r.name}: ${o.message}`)}catch(o){s.push(`${n.id}.${r.name}: ${o instanceof Error?o.message:String(o)}`)}}return{status:"success",registered:t,errors:s}},async unregisterComponent(e){let t=0,s=[],n=[];for(let[r,o]of this._tools.entries())o.componentId===e&&n.push(r);for(let r of n)try{let o=await this.unregisterTool(r);o.status==="success"?t++:s.push(`${r}: ${o.message}`)}catch(o){s.push(`${r}: ${o instanceof Error?o.message:String(o)}`)}return this._registeredComponents.delete(e),console.log(`MCP: Unregistered component ${e} with ${t} tools`),{status:"success",unregistered:t,errors:s}},async getTool(e){let t=this._tools.get(e);return t?t.tool:null},isInitialized(){return this._isInitialized},getStats(){return{toolCount:this._tools.size,isInitialized:this._isInitialized}},cleanup(){this._tools.clear(),this._registeredComponents.clear(),this._isInitialized=!1,console.log("MCP Server cleaned up")},handle(e,t){switch(e){case"initialize":return this.initialize();case"registerTool":return!t?.componentId||!t?.action||!t?.description?{status:"error",message:"registerTool requires componentId, action, and description"}:this.registerTool(t.componentId,t.action,t.description,t.parameters);case"unregisterTool":return t?.toolName?this.unregisterTool(t.toolName):{status:"error",message:"unregisterTool requires toolName"};case"getAvailableTools":return this.getAvailableTools();case"executeTool":return t?.toolCall?this.executeTool(t.toolCall):{content:[{type:"text",text:"executeTool requires toolCall parameter"}],isError:!0};case"autoRegisterFromApiComponents":return t?.components?this.autoRegisterFromApiComponents(t.components):{status:"error",message:"autoRegisterFromApiComponents requires components array"};case"unregisterComponent":return t?.componentId?this.unregisterComponent(t.componentId):{status:"error",message:"unregisterComponent requires componentId"};case"getTool":return t?.toolName?this.getTool(t.toolName):null;case"isInitialized":return this.isInitialized();case"getStats":return this.getStats();case"cleanup":return this.cleanup();case"processMCPMessage":return t?.message?this.processMCPMessage(t.message):{jsonrpc:"2.0",error:{code:-32602,message:"Missing message parameter"},id:null};default:return{status:"error",message:`Unknown method: ${e}`}}}},c=u;export{c as default};
