// Built worker plugin: pyodide-new
// Generated on: 2025-05-31T09:40:09.783Z

function S(t){let e=t.trim().toLowerCase();return e.startsWith("<!doctype html")||e.startsWith("<html")||e.includes("<title>")||e.includes("<head>")||e.includes("<body>")}async function A(t){try{let e=[`/prometheos/worker/pyodide/python/${t}`],r=null;for(let n of e)try{console.log(`Trying to load Python file from: ${n}`);let o=await fetch(n);if(o.ok){let s=await o.text();if(S(s)){console.warn(`Got HTML content instead of Python from ${n}, trying next path...`),r=new Error(`Got HTML content instead of Python from ${n}`);continue}return console.log(`Successfully loaded Python file from: ${n}`),s}r=new Error(`Failed to load ${t} from ${n}: ${o.statusText}`)}catch(o){r=o instanceof Error?o:new Error(String(o))}return console.log(`All direct paths failed for ${t}, trying bundle fallback...`),await W(t)}catch(e){throw console.error(`Error loading Python file ${t}:`,e),e}}async function W(t){try{let e=["/worker/pyodide-python-bundle.json","/public/worker/pyodide-python-bundle.json","./worker/pyodide-python-bundle.json"];for(let r of e)try{console.log(`Trying to load bundle from: ${r}`);let n=await fetch(r);if(n.ok){let o=await n.text();if(S(o)){console.warn(`Got HTML content instead of JSON from ${r}`);continue}let s=JSON.parse(o);if(s[t])return console.log(`Successfully loaded ${t} from bundle at ${r}`),s[t];throw new Error(`File ${t} not found in bundle`)}}catch(n){console.warn(`Failed to load bundle from ${r}:`,n)}throw new Error(`Failed to load ${t} from bundle - all bundle paths failed`)}catch(e){throw console.error(`Bundle fallback failed for ${t}:`,e),e}}async function $(){let t=["desktop_api.py","desktop_api_legacy.py","events.py","mcp_protocol.py","comlink_helpers.py","bridge_init.py"];try{return(await Promise.all(t.map(r=>A(r)))).join(`

`)}catch(e){throw console.error("Error loading Python bridge files:",e),e}}async function T(){return A("comlink_helpers.py")}var f=class{pyodide;constructor(e){this.pyodide=e}async setupDesktopApiBridge(e){console.log("Setting up Hybrid Desktop API bridge...");try{this.pyodide.globals.set("_pyodide_plugin_instance",e),globalThis._pyodide_plugin_instance=e;let r=await $();await this.pyodide.runPython(r),console.log("Hybrid Desktop API bridge setup completed successfully")}catch(r){throw console.error("Failed to setup Hybrid Desktop API bridge:",r),r}}async enhanceComlinkIntegration(){console.log("Enhancing Python-Comlink integration...");try{let e=await T();await this.pyodide.runPython(e),console.log("Python-Comlink integration enhanced successfully")}catch(e){throw console.error("Failed to enhance Python-Comlink integration:",e),e}}};var I=Symbol("Comlink.proxy"),q=Symbol("Comlink.endpoint"),j=Symbol("Comlink.releaseProxy"),R=Symbol("Comlink.finalizer"),m=Symbol("Comlink.thrown"),z=t=>typeof t=="object"&&t!==null||typeof t=="function",G={canHandle:t=>z(t)&&t[I],serialize(t){let{port1:e,port2:r}=new MessageChannel;return D(t,e),[r,[r]]},deserialize(t){return t.start(),v(t)}},U={canHandle:t=>z(t)&&m in t,serialize({value:t}){let e;return t instanceof Error?e={isError:!0,value:{message:t.message,name:t.name,stack:t.stack}}:e={isError:!1,value:t},[e,[]]},deserialize(t){throw t.isError?Object.assign(new Error(t.value.message),t.value):t.value}},L=new Map([["proxy",G],["throw",U]]);function V(t,e){for(let r of t)if(e===r||r==="*"||r instanceof RegExp&&r.test(e))return!0;return!1}function D(t,e=globalThis,r=["*"]){e.addEventListener("message",function n(o){if(!o||!o.data)return;if(!V(r,o.origin)){console.warn(`Invalid origin '${o.origin}' for comlink proxy`);return}let{id:s,type:c,path:d}=Object.assign({path:[]},o.data),u=(o.data.argumentList||[]).map(p),i;try{let a=d.slice(0,-1).reduce((l,h)=>l[h],t),g=d.reduce((l,h)=>l[h],t);switch(c){case"GET":i=g;break;case"SET":a[d.slice(-1)[0]]=p(o.data.value),i=!0;break;case"APPLY":i=g.apply(a,u);break;case"CONSTRUCT":{let l=new g(...u);i=Z(l)}break;case"ENDPOINT":{let{port1:l,port2:h}=new MessageChannel;D(t,h),i=Q(l,[l])}break;case"RELEASE":i=void 0;break;default:return}}catch(a){i={value:a,[m]:0}}Promise.resolve(i).catch(a=>({value:a,[m]:0})).then(a=>{let[g,l]=_(a);e.postMessage(Object.assign(Object.assign({},g),{id:s}),l),c==="RELEASE"&&(e.removeEventListener("message",n),N(e),R in t&&typeof t[R]=="function"&&t[R]())}).catch(a=>{let[g,l]=_({value:new TypeError("Unserializable return value"),[m]:0});e.postMessage(Object.assign(Object.assign({},g),{id:s}),l)})}),e.start&&e.start()}function J(t){return t.constructor.name==="MessagePort"}function N(t){J(t)&&t.close()}function v(t,e){let r=new Map;return t.addEventListener("message",function(o){let{data:s}=o;if(!s||!s.id)return;let c=r.get(s.id);if(c)try{c(s)}finally{r.delete(s.id)}}),x(t,r,[],e)}function P(t){if(t)throw new Error("Proxy has been released and is not useable")}function O(t){return y(t,new Map,{type:"RELEASE"}).then(()=>{N(t)})}var w=new WeakMap,k="FinalizationRegistry"in globalThis&&new FinalizationRegistry(t=>{let e=(w.get(t)||0)-1;w.set(t,e),e===0&&O(t)});function Y(t,e){let r=(w.get(e)||0)+1;w.set(e,r),k&&k.register(t,e,t)}function X(t){k&&k.unregister(t)}function x(t,e,r=[],n=function(){}){let o=!1,s=new Proxy(n,{get(c,d){if(P(o),d===j)return()=>{X(s),O(t),e.clear(),o=!0};if(d==="then"){if(r.length===0)return{then:()=>s};let u=y(t,e,{type:"GET",path:r.map(i=>i.toString())}).then(p);return u.then.bind(u)}return x(t,e,[...r,d])},set(c,d,u){P(o);let[i,a]=_(u);return y(t,e,{type:"SET",path:[...r,d].map(g=>g.toString()),value:i},a).then(p)},apply(c,d,u){P(o);let i=r[r.length-1];if(i===q)return y(t,e,{type:"ENDPOINT"}).then(p);if(i==="bind")return x(t,e,r.slice(0,-1));let[a,g]=H(u);return y(t,e,{type:"APPLY",path:r.map(l=>l.toString()),argumentList:a},g).then(p)},construct(c,d){P(o);let[u,i]=H(d);return y(t,e,{type:"CONSTRUCT",path:r.map(a=>a.toString()),argumentList:u},i).then(p)}});return Y(s,t),s}function K(t){return Array.prototype.concat.apply([],t)}function H(t){let e=t.map(_);return[e.map(r=>r[0]),K(e.map(r=>r[1]))]}var F=new WeakMap;function Q(t,e){return F.set(t,e),t}function Z(t){return Object.assign(t,{[I]:!0})}function _(t){for(let[e,r]of L)if(r.canHandle(t)){let[n,o]=r.serialize(t);return[{type:"HANDLER",name:e,value:n},o]}return[{type:"RAW",value:t},F.get(t)||[]]}function p(t){switch(t.type){case"HANDLER":return L.get(t.name).deserialize(t.value);case"RAW":return t.value}}function y(t,e,r,n){return new Promise(o=>{let s=ee();e.set(s,o),t.start&&t.start(),t.postMessage(Object.assign({id:s},r),n)})}function ee(){return new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}var b=class{handleComlinkPort(e){try{console.log("Received Comlink port from main thread"),console.log("Wrapping Comlink port for desktop_api_comlink and desktop_mcp_comlink");let r=v(e);globalThis.desktop_api_comlink=r.api,globalThis.desktop_mcp_comlink=r.mcp,console.log("desktop_api_comlink and desktop_mcp_comlink proxies set on globalThis"),e.start(),console.log("Comlink bridge proxies exposed to Python context")}catch(r){console.error("Error handling Comlink port:",r)}}};var E=class{_pyodide=null;_isLoading=!1;_progress=null;async initPyodide(){if(this._pyodide)return{status:"success",message:"Pyodide already initialized"};if(this._isLoading)return{status:"loading",message:"Pyodide initialization in progress"};try{this._isLoading=!0,this._progress={phase:"initializing",message:"Starting Pyodide initialization..."},console.log("Loading Pyodide from CDN..."),this._progress={phase:"downloading",message:"Downloading Pyodide runtime..."},console.log("Loading Pyodide via fetch...");let e=await fetch("https://cdn.jsdelivr.net/pyodide/v0.24.1/full/pyodide.js");if(!e.ok)throw new Error(`Failed to load Pyodide: ${e.statusText}`);let r=await e.text();new Function(r).call(globalThis);let s=globalThis.loadPyodide;if(!s)throw new Error("loadPyodide not available after loading script");let c=await s({indexURL:"https://cdn.jsdelivr.net/pyodide/v0.24.1/full/"});return this._pyodide=c,this._progress={phase:"extracting",message:"Installing base packages..."},await this._pyodide.loadPackage(["micropip"]),this._progress={phase:"ready",message:"Pyodide ready for Python execution"},this._isLoading=!1,console.log("Pyodide initialized successfully"),{status:"success",message:"Pyodide initialized"}}catch(e){return this._isLoading=!1,this._progress=null,console.error("Failed to initialize Pyodide:",e),{status:"error",message:`Failed to initialize Pyodide: ${e instanceof Error?e.message:String(e)}`}}}async executePython(e,r=!1){if(!this._pyodide)return{success:!1,error:"Pyodide not initialized. Call initPyodide() first."};try{let n="";r&&await this._pyodide.runPython(`
import sys
from io import StringIO
_stdout_capture = StringIO()
sys.stdout = _stdout_capture
`);let o;if(typeof this._pyodide.runPythonAsync=="function")o=await this._pyodide.runPythonAsync(e);else if(typeof this._pyodide.runPython=="function")o=this._pyodide.runPython(e);else throw new Error("Neither runPython nor runPythonAsync is available");if(r){let s=await this._pyodide.runPython(`
_stdout_capture.getvalue()
`);n=String(s),await this._pyodide.runPython(`
sys.stdout = sys.__stdout__
`)}return{success:!0,result:o,stdout:r?n:void 0}}catch(n){return{success:!1,error:n instanceof Error?n.message:String(n)}}}async installPackage(e){if(!this._pyodide)return{success:!1,error:"Pyodide not initialized"};try{return await this._pyodide.runPython(`
import micropip
await micropip.install('${e}')
`),{success:!0,result:`Package ${e} installed successfully`}}catch(r){return{success:!1,error:`Failed to install ${e}: ${r instanceof Error?r.message:String(r)}`}}}getProgress(){return this._progress}isReady(){return this._pyodide!==null&&!this._isLoading}getPyodide(){return this._pyodide}cleanup(){this._pyodide&&(this._pyodide=null,this._progress=null,console.log("Pyodide core cleaned up"))}};var C=class{async handleDesktopApiRequest(e,r,n){try{switch(e){case"list_components":return console.log("Python requested component list"),{success:!0,result:{type:"desktop-api-response",requestId:r,method:e,result:[]}};case"execute_action":{let{componentId:o,action:s,params:c}=n||{};return console.log(`Python requested action: ${o}.${s}`,c),{success:!0,result:{type:"desktop-api-response",requestId:r,method:e,result:{success:!0,message:`Action ${s} on ${o} executed`}}}}case"subscribe_event":{let{eventName:o}=n||{};return console.log(`Python ${e}: ${o}`),{success:!0,result:{type:"desktop-api-response",requestId:r,method:e,result:{success:!0,message:`Subscribed to ${o}`}}}}case"emit_event":{let{eventName:o,data:s}=n||{};return console.log(`Python emitting event: ${o}`,s),{success:!0,result:{type:"desktop-api-response",requestId:r,method:e,result:{success:!0,message:`Event ${o} emitted`}}}}default:return{success:!1,error:`Unknown desktop API method: ${e}`}}}catch(o){return{success:!1,error:o instanceof Error?o.message:String(o)}}}};var M=class{forwardToMCPServer;constructor(e){this.forwardToMCPServer=e}async handleMCPProtocolMessage(e){try{let r;return typeof e=="string"?(console.log("Parsing JSON message:",e),r=JSON.parse(e)):r=e,console.log("Handling MCP protocol message:",JSON.stringify(r)),console.log("Message type:",typeof r),console.log("Message keys:",Object.keys(r||{})),{success:!0,result:await this.forwardToMCPServer(r)}}catch(r){return console.error("Error handling MCP message:",r),{success:!1,error:r instanceof Error?r.message:String(r)}}}};var re={id:"pyodide",_core:new E,_bridge:null,_mcpHandler:null,_comlinkHandler:new b,_desktopAPIHandler:new C,async initPyodide(){let t=await this._core.initPyodide();if(t.status==="success"){let e=this._core.getPyodide();if(e){this._bridge=new f(e),this._mcpHandler=new M(this._forwardToMCPServer.bind(this)),await this._setupDesktopApiBridge();try{await this._enhanceComlinkIntegration()}catch(r){console.warn("Failed to enhance Comlink integration, but continuing:",r)}}}return t},async _setupDesktopApiBridge(){if(!this._bridge)throw new Error("Bridge not initialized");await this._bridge.setupDesktopApiBridge(this)},async executePython(t,e=!1){return this._core.executePython(t,e)},async installPackage(t){return this._core.installPackage(t)},getProgress(){return this._core.getProgress()},isReady(){return this._core.isReady()},cleanup(){this._core.cleanup(),this._bridge=null,this._mcpHandler=null},async handleMCPProtocolMessage(t){return this._mcpHandler?this._mcpHandler.handleMCPProtocolMessage(t):{success:!1,error:"MCP handler not initialized"}},async _forwardToMCPServer(t){let r=self.workerPluginManager;if(!r)throw new Error("Worker plugin manager not available");try{await r.callPlugin("mcp-server","isInitialized")||(console.log("MCP server not initialized, initializing..."),await r.callPlugin("mcp-server","initialize"))}catch(n){console.warn("Error checking MCP server, will try to call anyway:",n)}return r.callPlugin("mcp-server","processMCPMessage",{message:t})},handleComlinkPort(t){this._comlinkHandler.handleComlinkPort(t)},handle(t,e){switch(t){case"initPyodide":return this.initPyodide();case"executePython":return typeof e?.code!="string"?{success:!1,error:"executePython requires 'code' parameter"}:this.executePython(e.code,!!e.returnStdout);case"installPackage":return typeof e?.packageName!="string"?{success:!1,error:"installPackage requires 'packageName' parameter"}:this.installPackage(e.packageName);case"getProgress":return this.getProgress();case"isReady":return this.isReady();case"cleanup":return this.cleanup();case"handleDesktopApiRequest":return typeof e?.method!="string"||typeof e?.requestId!="string"?{success:!1,error:"handleDesktopApiRequest requires 'method' and 'requestId' parameters"}:this.handleDesktopApiRequest(e.method,e.requestId,e.params);case"handleMCPProtocolMessage":return e?.message===void 0?{success:!1,error:"handleMCPProtocolMessage requires 'message' parameter"}:this.handleMCPProtocolMessage(e.message);case"handleComlinkPort":return!e?.port||!(e.port instanceof MessagePort)?{success:!1,error:"handleComlinkPort requires a valid MessagePort parameter"}:this.handleComlinkPort(e.port);default:return{success:!1,error:`Unknown method: ${t}`}}},async handleDesktopApiRequest(t,e,r){return this._desktopAPIHandler.handleDesktopApiRequest(t,e,r)},async _enhanceComlinkIntegration(){if(!this._bridge)throw new Error("Bridge not initialized");await this._bridge.enhanceComlinkIntegration()}},B=re;var Pe=B;export{Pe as default};
/*! Bundled license information:

comlink/dist/esm/comlink.mjs:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
