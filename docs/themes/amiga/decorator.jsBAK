/**
 * Amiga Workbench Theme Window Decorator
 * This decorator adds Amiga Workbench specific styling and behavior to windows
 */

// Import React from CDN for use in decorator modules
import React from "https://esm.sh/react@18.2.0";

/**
 * Preload the Amiga theme CSS
 * @param {string} previousTheme - The previous theme's name (optional)
 * @returns {Promise<boolean>} Resolves true if loaded, false if error
 */
export async function preload(previousTheme) {
  // Remove any existing theme CSS
  document.getElementById("amiga-theme-css")?.remove();

  // Create and append the Amiga CSS
  const link = document.createElement("link");
  link.id = "amiga-theme-css";
  link.rel = "stylesheet";
  link.href = "/themes/amiga/amiga.css";

  return new Promise((resolve) => {
    link.onload = () => {
      console.log("Amiga theme CSS loaded");
      resolve(true);
    };
    link.onerror = () => {
      console.error("Failed to load Amiga theme CSS");
      resolve(false);
    };
    document.head.appendChild(link);
  });
}

/**
 * Post-load adjustments for Amiga theme
 * Applies additional styling after the theme is loaded
 */
export function postload() {
  console.log("Amiga theme post-load");
  // Add any post-load adjustments if needed
}

/**
 * Cleanup function - called when switching away from the theme
 * Removes all injected CSS and style elements
 */
export function cleanup() {
  console.log("Amiga cleanup called");
  document.getElementById("amiga-theme-css")?.remove();
}

/**
 * AmigaControls - Renders Amiga Workbench style window control buttons
 * @param {Object} props - Button handlers
 */
function AmigaControls({ onMinimize, onMaximize, onClose }) {
  return React.createElement(
    "div",
    { className: "window-controls" },
    // Close button
    React.createElement(
      "button",
      {
        className: "window-control window-close",
        onClick: onClose,
        "aria-label": "Close",
        style: { 
          backgroundColor: "var(--wm-btn-close-bg)", 
          width: "14px",
          height: "14px",
          margin: "0 2px",
          border: "1px solid #000",
          borderRadius: "7px",
          padding: "0"
        }
      }
    ),
    // Maximize button
    React.createElement(
      "button",
      {
        className: "window-control window-maximize",
        onClick: onMaximize,
        "aria-label": "Maximize",
        style: { 
          backgroundColor: "var(--wm-btn-maximize-bg)", 
          width: "14px",
          height: "14px",
          margin: "0 2px",
          border: "1px solid #000",
          borderRadius: "7px",
          padding: "0"
        }
      }
    ),
    // Minimize button
    React.createElement(
      "button",
      {
        className: "window-control window-minimize",
        onClick: onMinimize,
        "aria-label": "Minimize",
        style: { 
          backgroundColor: "var(--wm-btn-minimize-bg)", 
          width: "14px",
          height: "14px",
          margin: "0 2px",
          border: "1px solid #000",
          borderRadius: "7px",
          padding: "0"
        }
      }
    )
  );
}

// Create the main decorator object
const AmigaDecorator = {
  preload, // Called before theme is applied
  postload, // Called after theme is applied
  cleanup, // Called when theme is removed
  Header: AmigaHeader, // React component for window title bar
  Controls: AmigaControls, // React component for window controls
  borderRadius: 0, // Window border radius (px)
};

// Export as ESM only
export default AmigaDecorator;
      "button",
      {
        className: "window-control",
        onClick: onMinimize,
        "aria-label": "Minimize",
        style: { 
          backgroundColor: "var(--wm-btn-minimize-bg)", 
          width: "14px",
          height: "14px",
          margin: "0 2px",
          border: "1px solid #000",
          borderRadius: "7px",
          padding: "0"
        }
      }
    )
  );
}

/**
 * AmigaHeader - Renders the Amiga Workbench style window title bar with controls
 * @param {Object} props - Title, handlers, and headerRef for drag
 */
function AmigaHeader({ title, onMinimize, onMaximize, onClose, headerRef }) {
  return React.createElement(
    "div",
    {
      ref: headerRef,
      className: "window-header amiga-header",
      style: {
        cursor: "move",
        backgroundColor: "var(--window-header-background)",
        color: "var(--window-header-text)",
        height: "var(--wm-header-height)",
        display: "flex",
        alignItems: "center",
        padding: "0 4px",
        fontWeight: "bold",
        textTransform: "uppercase",
        fontSize: "11px"
      }
    },
    React.createElement("div", { className: "window-title" }, title),
    React.createElement(AmigaControls, { onMinimize, onMaximize, onClose })
  );
}

    // Add window icon if specified (depth gadget)
    if (windowConfig.icon && header) {
      const iconElement = document.createElement("div");
      iconElement.className = "window-depth-gadget";
      iconElement.style.backgroundImage = `url(${windowConfig.icon})`;
      iconElement.style.width = "16px";
      iconElement.style.height = "16px";
      iconElement.style.marginRight = "4px";
      iconElement.style.cursor = "pointer";

      // Add depth behavior (bring to front on click)
      iconElement.addEventListener("click", () => {
        if (this.windowManager) {
          this.windowManager.bringToFront(windowElement.id);
        }
      });

      const title = header.querySelector(".window-title");
      if (title) {
        header.insertBefore(iconElement, title);
      }
    }

    // Add resize gadget to bottom right
    const resizeGadget = document.createElement("div");
    resizeGadget.className = "amiga-resize-gadget";
    resizeGadget.style.position = "absolute";
    resizeGadget.style.right = "0";
    resizeGadget.style.bottom = "0";
    resizeGadget.style.width = "16px";
    resizeGadget.style.height = "16px";
    resizeGadget.style.backgroundImage = "url(/themes/amiga/resize.png)";
    resizeGadget.style.cursor = "nwse-resize";

    windowElement.appendChild(resizeGadget);

    return windowElement;
  }

  /**
   * Create an Amiga Workbench style button
   * @param {string} action - Button action (minimize, maximize, close)
   * @param {string} label - Button label (usually empty for Amiga)
   * @returns {HTMLElement}
   */
  createButton(action, label) {
    const button = document.createElement("button");
    button.className = `window-button window-${action}`;
    button.dataset.action = action;
    button.innerHTML = label;
    button.style.cursor = "pointer";

    return button;
  }

  /**
   * Decorate the taskbar/dock with Amiga Workbench styling
   * @param {HTMLElement} taskbarElement - The taskbar DOM element
   */
  decorateTaskbar(taskbarElement) {
    taskbarElement.classList.add("amiga-taskbar");

    // Create Workbench Menu Button
    const menuButton = document.createElement("button");
    menuButton.className = "amiga-menu-button";
    menuButton.textContent = "Workbench";

    // Insert at beginning of taskbar
    if (taskbarElement.firstChild) {
      taskbarElement.insertBefore(menuButton, taskbarElement.firstChild);
    } else {
      taskbarElement.appendChild(menuButton);
    }

    // Add clock to right side
    const clockElement = document.createElement("div");
    clockElement.className = "amiga-clock";
    clockElement.style.marginLeft = "auto";
    clockElement.style.fontSize = "11px";
    clockElement.style.textTransform = "uppercase";

    // Update clock
    const updateClock = () => {
      const now = new Date();
      clockElement.textContent = now.toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
      });
    };

    updateClock();
    setInterval(updateClock, 60000);

    taskbarElement.appendChild(clockElement);
  }

  /**
   * Create desktop icon in Amiga Workbench style
   * @param {Object} iconConfig - Icon configuration
   * @returns {HTMLElement}
   */
  createDesktopIcon(iconConfig) {
    const iconElement = document.createElement("div");
    iconElement.className = "amiga-desktop-icon";

    const iconImage = document.createElement("div");
    iconImage.className = "icon-image";
    iconImage.style.backgroundImage = `url(${iconConfig.icon})`;

    const iconLabel = document.createElement("div");
    iconLabel.className = "icon-label";
    iconLabel.textContent = iconConfig.label;

    iconElement.appendChild(iconImage);
    iconElement.appendChild(iconLabel);

    // Add selection behavior
    iconElement.addEventListener("click", () => {
      // Deselect other icons
      document
        .querySelectorAll(".amiga-desktop-icon.selected")
        .forEach((icon) => {
          if (icon !== iconElement) {
            icon.classList.remove("selected");
          }
        });

      iconElement.classList.toggle("selected");
    });

    return iconElement;
  }

  /**
   * Create an Amiga Workbench style gadget (button)
   * @param {string} label - Gadget label
   * @returns {HTMLElement}
   */
  createGadget(label) {
    const gadget = document.createElement("button");
    gadget.className = "amiga-gadget";
    gadget.textContent = label;
    return gadget;
  }
}

// Export as ES Module
export default AmigaDecorator;
